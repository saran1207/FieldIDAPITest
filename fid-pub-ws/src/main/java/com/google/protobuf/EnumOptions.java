// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Users/kirillternovsky/Documents/web/fid-pub-ws/src/main/proto/descriptor.proto
package com.google.protobuf;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Extension;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Label.REPEATED;

public final class EnumOptions extends ExtendableMessage<EnumOptions> {

  public static final Boolean DEFAULT_ALLOW_ALIAS = false;
  public static final Boolean DEFAULT_DEPRECATED = false;
  public static final List<UninterpretedOption> DEFAULT_UNINTERPRETED_OPTION = Collections.emptyList();

  /**
   * Set this option to true to allow mapping different tag names to the same
   * value.
   */
  @ProtoField(tag = 2, type = BOOL)
  public final Boolean allow_alias;

  /**
   * Is this enum deprecated?
   * Depending on the target platform, this can emit Deprecated annotations
   * for the enum, or it will be completely ignored; in the very least, this
   * is a formalization for deprecating enums.
   */
  @ProtoField(tag = 3, type = BOOL)
  public final Boolean deprecated;

  /**
   * The parser stores options it doesn't recognize here. See above.
   */
  @ProtoField(tag = 999, label = REPEATED)
  public final List<UninterpretedOption> uninterpreted_option;

  public EnumOptions(Boolean allow_alias, Boolean deprecated, List<UninterpretedOption> uninterpreted_option) {
    this.allow_alias = allow_alias;
    this.deprecated = deprecated;
    this.uninterpreted_option = immutableCopyOf(uninterpreted_option);
  }

  private EnumOptions(Builder builder) {
    this(builder.allow_alias, builder.deprecated, builder.uninterpreted_option);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof EnumOptions)) return false;
    EnumOptions o = (EnumOptions) other;
    if (!extensionsEqual(o)) return false;
    return equals(allow_alias, o.allow_alias)
        && equals(deprecated, o.deprecated)
        && equals(uninterpreted_option, o.uninterpreted_option);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = extensionsHashCode();
      result = result * 37 + (allow_alias != null ? allow_alias.hashCode() : 0);
      result = result * 37 + (deprecated != null ? deprecated.hashCode() : 0);
      result = result * 37 + (uninterpreted_option != null ? uninterpreted_option.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends ExtendableBuilder<EnumOptions> {

    public Boolean allow_alias;
    public Boolean deprecated;
    public List<UninterpretedOption> uninterpreted_option;

    public Builder() {
    }

    public Builder(EnumOptions message) {
      super(message);
      if (message == null) return;
      this.allow_alias = message.allow_alias;
      this.deprecated = message.deprecated;
      this.uninterpreted_option = copyOf(message.uninterpreted_option);
    }

    /**
     * Set this option to true to allow mapping different tag names to the same
     * value.
     */
    public Builder allow_alias(Boolean allow_alias) {
      this.allow_alias = allow_alias;
      return this;
    }

    /**
     * Is this enum deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the enum, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating enums.
     */
    public Builder deprecated(Boolean deprecated) {
      this.deprecated = deprecated;
      return this;
    }

    /**
     * The parser stores options it doesn't recognize here. See above.
     */
    public Builder uninterpreted_option(List<UninterpretedOption> uninterpreted_option) {
      this.uninterpreted_option = checkForNulls(uninterpreted_option);
      return this;
    }

    @Override
    public <E> Builder setExtension(Extension<EnumOptions, E> extension, E value) {
      super.setExtension(extension, value);
      return this;
    }

    @Override
    public EnumOptions build() {
      return new EnumOptions(this);
    }
  }
}
