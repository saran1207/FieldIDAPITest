package com.n4systems.util.mail;

import com.n4systems.fieldid.service.download.SystemUrlUtil;
import com.n4systems.model.*;
import com.n4systems.model.orgs.BaseOrg;
import com.n4systems.model.user.User;
import com.n4systems.model.utils.PlainDate;
import com.n4systems.util.FieldIdDateFormatter;

import java.text.MessageFormat;
import java.util.Date;

/**
 * This utility provides methods for making various URLs for Event Notification or Escalation emails.
 *
 * Created by Jordan Heath on 2015-08-25.
 */
public class EventUrlUtil {
    private static final String ASSET_URL_FRAGMENT = "/fieldid/w/assetSummary?4&uniqueID=";
    private static final String PLACE_SUMMARY_URL_FRAGMENT = "/fieldid/w/placeSummary?0&id=";

    //Event Summary Fragments
    private static final String THING_EVENT_SUMMARY_URL_FRAGMENT = "/fieldid/w/thingEventSummary?0&id=";
    private static final String PLACE_EVENT_SUMMARY_URL_FRAGMENT = "/fieldid/w/placeEventSummary?0&id=";
    private static final String PROC_AUDIT_EVENT_SUMMARY_URL_FRAGMENT = "/fieldid/w/procAuditEventSummary?0&id=";

    //Main Perform Event Fragment
    private static final String PERFORM_EVENT_URL_FRAGMENT = "/fieldid/w/{0}?0&scheduleId={1}&type={2}";

    //Event ID Fragments...
    private static final String THING_EVENT_ID_FRAGMENT = "&assetId={3}";
    private static final String PLACE_EVENT_ID_FRAGMENT = "&placeId={3}";
    private static final String PROCEDURE_AUDIT_ID_FRAGMENT = "&procedureDefinitionId={3}";

    //Perform Event Fragments...
    private static final String PERFORM_PROCEDURE_AUDIT_FRAGMENT = "performProcedureAuditEvent";
    private static final String PERFORM_THING_EVENT_FRAGMENT = "performEvent";
    private static final String PERFORM_PLACE_EVENT_FRAGMENT = "performPlaceEvent";

    //Master Event Fragments - These are pretty different, so they live on their own.
    //NOTE: The "eventGroupId" query parameter is being left there just to make the URL seem exactly like the one
    //      generated by the app.  I'm not too convinced that field is still used.
    private static final String PERFORM_MASTER_EVENT_FRAGMENT = "/fieldid/masterEventAdd.action?assetId={0}&type={1}&eventGroupId=&scheduleId={2}";


    /**
     * Create a simple name for an Asset for display on an Escalation Email.
     *
     * @param asset -  An Asset entity representing the Asset related to a Thing Event that has gone past its due date.
     * @return A String representation of the name and type of an Asset.
     */
    public static String createAssetName(Asset asset) {
        return asset.getType().getName() + " / " + asset.getIdentifier();
    }

    /**
     * This method accepts Events, but assumes that they have Triggering Events.  These Events are processed to produce
     * a String which represents the said Triggering Event.
     *
     * @param event - An Event with a Triggering Event.  If you supply an Event without one, the plug comes out of the bottom of the Atlantic Ocean.
     * @return A String representing the Event's Triggering Event.
     */
    public static String createTriggeringEventString(Event event, User assignee) {
        Date completedDate = event.getTriggerEvent().getCompletedDate();
        String completedDateString = new FieldIdDateFormatter(completedDate,
                assignee,
                false,
                !new PlainDate(completedDate).equals(completedDate)).format();

        return completedDateString + " From " + event.getType().getName();
    }

    /**
     * This method creates a Perform Event URL for a provided event.  This URL is tailored to the type of event and is
     * used in the Work Notification email to allow users to sign in directly to the mentioned event and perform it.
     *
     * @param event - An Event entity that already exists in the Database.
     * @return A String representation of the Perform Event URL for the provided Event.
     */
    public static String createPerformEventUrl(Event event) {
        String performEventUrl = SystemUrlUtil.getSystemUrl(event.getTenant()) + PERFORM_EVENT_URL_FRAGMENT;
        if(event instanceof ThingEvent) {
            if(event.getType() instanceof ThingEventType &&
                    ((ThingEventType)event.getType()).isMaster()) {
                //Master events are a bit different, since they use Struts.  We'll just resassign a completely
                //different URL here and continue on with our business.
                performEventUrl = SystemUrlUtil.getSystemUrl(event.getTenant()) + PERFORM_MASTER_EVENT_FRAGMENT;
                performEventUrl = MessageFormat.format(performEventUrl,
                        ((ThingEvent) event).getAsset().getId().toString(),
                        event.getType().getId().toString(),
                        event.getId().toString());
            } else {
                performEventUrl += THING_EVENT_ID_FRAGMENT;
                performEventUrl = MessageFormat.format(performEventUrl,
                        PERFORM_THING_EVENT_FRAGMENT,
                        event.getId().toString(),
                        event.getType().getId().toString(),
                        ((ThingEvent) event).getAsset().getId().toString());
            }
        } else
        if(event instanceof PlaceEvent) {
            performEventUrl += PLACE_EVENT_ID_FRAGMENT;
            performEventUrl = MessageFormat.format(performEventUrl,
                    PERFORM_PLACE_EVENT_FRAGMENT,
                    event.getId().toString(),
                    event.getType().getId().toString(),
                    ((PlaceEvent)event).getPlace().getId().toString());
        } else
        if(event instanceof ProcedureAuditEvent) {
            performEventUrl += PROCEDURE_AUDIT_ID_FRAGMENT;
            performEventUrl = MessageFormat.format(performEventUrl,
                    PERFORM_PROCEDURE_AUDIT_FRAGMENT,
                    event.getId().toString(),
                    event.getType().getId().toString(),
                    ((ProcedureAuditEvent)event).getProcedureDefinition().getId().toString());
        }

        return performEventUrl;
    }

    /**
     * This method builds a String representation of a URL to an asset using only the provided Asset itself.
     *
     * @param asset - An Asset entity representing an Asset in the system.
     * @return A String representation of the URL that should allow the user to open the Asset in the app.
     */
    public static String createAssetSummaryUrl(Asset asset) {
        return SystemUrlUtil.getSystemUrl(asset.getTenant()) + ASSET_URL_FRAGMENT + asset.getId().toString();
    }


    /**
     * This method creates the appropriate URL to view the summary of any kind of event that has a summary page... I
     * think.  It might also just release the Kraken.
     *
     * @param event - An event that you want to get the Event Summary URL for... or maybe you just want to feed it to the Kraken.
     * @return A String representation of the Event Summary URL... definitely not the Kraken.
     */
    public static String createEventSummaryUrl(Event event) {
        String returnMe = null;
        if(event instanceof ThingEvent) {
            returnMe = SystemUrlUtil.getSystemUrl(event.getTenant()) + THING_EVENT_SUMMARY_URL_FRAGMENT + event.getId().toString();
        } else
        if(event instanceof PlaceEvent) {
            returnMe = SystemUrlUtil.getSystemUrl(event.getTenant()) + PLACE_EVENT_SUMMARY_URL_FRAGMENT + event.getId().toString();
        } else
        if(event instanceof ProcedureAuditEvent) {
            returnMe = SystemUrlUtil.getSystemUrl(event.getTenant()) + PROC_AUDIT_EVENT_SUMMARY_URL_FRAGMENT + event.getId().toString();
        }
        return returnMe;
    }

    /**
     * This method creates a URL linking to the Place Summary page for the Place associated with the provided
     * PlaceEvent.
     *
     * @param place - A BaseOrg for which you want the Place Summary URL.
     * @return A String representation of the URL for the Place Summary page related to the Place from the supplied PlaceEvent.
     */
    public static String createPlaceSummaryUrl(BaseOrg place) {
        return SystemUrlUtil.getSystemUrl(place.getTenant()) + PLACE_SUMMARY_URL_FRAGMENT + place.getId();
    }
}
