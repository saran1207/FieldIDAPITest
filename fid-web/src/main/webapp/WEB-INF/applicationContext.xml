<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd        
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- EJB EJBContainerS -->
    
    <context:component-scan base-package="com.n4systems.fieldid.config"/>
    <context:annotation-config/>
    <tx:annotation-driven transaction-manager="txManager"/>
    <aop:aspectj-autoproxy/>


  	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
      	<property name="scopes">
          <map>
              <entry key="thread">
                  <bean class="org.springframework.context.support.SimpleThreadScope"/>
              </entry>
          	</map>
    	  </property>
	  </bean>

		
	<!--  moved to FieldIdAppConfig 
    <bean id="productTypeEJBContainer" class="com.n4systems.ejb.legacy.wrapper.LegacyAssetTypeEJBContainer"/>
	-->
	
	<!--  moved to FieldIdAppConfig 
    <bean id="productSerialEJBContainer" class="com.n4systems.ejb.legacy.wrapper.LegacyAssetEJBContainer"/>
    -->    
    
    <!--  spring quartz task related beans -->    
	<task:executor id="executor" pool-size="8" queue-capacity="512" />	    
	<task:annotation-driven executor="executor"/>
    <task:scheduler id="scheduler" pool-size="20"/>
 	<!-- if we use @Scheduled in future, will need to have this XML .... <task:scheduler id="scheduler" pool-size="20"/> -->

    <bean id="optionEJBContainer" class="com.n4systems.ejb.legacy.wrapper.OptionEJBContainer"/>

    <!-- Now declared inside FieldIdAppConfig -->
    <!--<bean id="userEJBContainer" class="com.n4systems.ejb.legacy.wrapper.UserEJBContainer"/>-->

    <bean id="unitOfMeasureEJBContainer" class="com.n4systems.ejb.legacy.wrapper.UnitOfMeasureManagerEJBContainer"/>

    <bean id="orderMappingEJBContainer" class="com.n4systems.ejb.legacy.wrapper.OrderMappingEJBContainer"/>

    <bean id="productCodeMappingEJBContainer" class="com.n4systems.ejb.legacy.wrapper.AssetCodeMappingEJBContainer"/>

    <!--bean id="persistenceEJBContainer" class="com.n4systems.ejb.wrapper.PersistenceManagerEJBContainer"/-->

    <bean id="autoAttributeEJBContainer" class="com.n4systems.ejb.wrapper.AutoAttributeManagerEJBContainer"/>

	
	<!--  moved to FieldIdAppConfig 
    <bean id="scheduleEJBContainer" class="com.n4systems.ejb.wrapper.EventScheduleManagerEJBContainer"/>
	-->
	
    <bean id="massUpdateEJBContainer" class="com.n4systems.ejb.wrapper.MassUpdateManagerEJBContainer"/>

    <bean id="inspectionEJBContainer" class="com.n4systems.ejb.wrapper.EventManagerEJBContainer"/>

	<!--  moved to FieldIdAppConfig class
    <bean id="proofTestHandler" class="com.n4systems.ejb.wrapper.ProofTestHandlerEJBContainer"/>
	-->
	
    <bean id="aggregateReportEJBContainer" class="com.n4systems.ejb.wrapper.AggregateReportManagerEJBContainer"/>

	<!--  moved to FieldIdAppConfig class
    <bean id="orderEJBContainer" class="com.n4systems.ejb.wrapper.OrderManagerEJBContainer"/>
     -->

	
	<!--  moved to FieldIdAppConfig class
    <bean id="productEJBContainer" class="com.n4systems.ejb.wrapper.AssetManagerEJBContainer"/>
	-->

    <bean id="projectEJBContainer" class="com.n4systems.ejb.wrapper.ProjectManagerEJBContainer"/>

    <bean id="populatorLog" class="com.n4systems.ejb.legacy.wrapper.PopulatorLogEJBContainer"/>


    <!--  FROM FIELDID ADMIN -->
    <bean id="importManager" class="com.n4systems.importing.ImportManagerEJBContainer"/>

    <bean id="adminReportsService" class="com.n4systems.fieldid.service.admin.AdminReportsService"/>

    <!-- bean id="configManager" class="com.n4systems.ejb.wrapper.ConfigManagerEJBContainer" />
	<bean id="persistenceManager" class="com.n4systems.ejb.wrapper.PersistenceManagerEJBContainer" />
	<bean id="assetTypeManager" class="com.n4systems.ejb.legacy.wrapper.LegacyAssetTypeEJBContainer" />
	<bean id="assetManager" class="com.n4systems.ejb.legacy.wrapper.LegacyAssetEJBContainer" />
	<bean id="optionManager" class="com.n4systems.ejb.legacy.wrapper.OptionEJBContainer" />
	<bean id="userManager" class="com.n4systems.ejb.legacy.wrapper.UserEJBContainer" />
	<bean id="orderMappingManager" class="com.n4systems.ejb.legacy.wrapper.OrderMappingEJBContainer" />
	<bean id="serialNumberCounterManager" class="com.n4systems.ejb.legacy.wrapper.SerialNumberCounterEJBContainer" />
	<bean id="productCodeMappingMnager" class="com.n4systems.ejb.legacy.wrapper.AssetCodeMappingEJBContainer" />
	<bean id="importManager" class="com.n4systems.importing.ImportManagerEJBContainer"/-->

    <!--SSO begin-->

    <bean id="SsoMetadataDao" class="com.n4systems.sso.dao.SsoMetadataDaoImpl"/>
    <bean id="SsoMetadataServices" class = "com.n4systems.fieldid.sso.SsoMetadataServicesImpl"/>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

    <!--Only using IDP initiated IDP - no need for a key manager-->
    <bean id="keyManager" class="org.springframework.security.saml.key.EmptyKeyManager"/>

    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize"/>
    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"/>

    <bean id="metadata" class="com.n4systems.fieldid.sso.SSOCachingMetadataManager">
        <property name="RefreshCheckInterval" value="-1"/>
        <property name="RefreshRequired" value="false"/>
    </bean>

    <!-- Secured pages with SAML as entry point -->
    <security:http entry-point-ref="samlEntryPoint" use-expressions="false">
        <security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
        <!--CSRF is turned on by default starting with Spring security 4-->
        <security:csrf disabled="true"></security:csrf>
    </security:http>

    <!-- Filters for processing of SAML messages -->
    <bean id="samlFilter" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
            <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
        </security:filter-chain-map>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler"
          class="com.n4systems.fieldid.sso.SamlLogonResultHandler">
    </bean>

    <bean id="failureRedirectHandler"
          class="com.n4systems.fieldid.sso.SamlLogonResultHandler">
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <!-- Register authentication manager for SAML provider -->
        <security:authentication-provider ref="samlAuthenticationProvider"/>
    </security:authentication-manager>
    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
        <!-- Enable these to see the actual SAML Messages in logs -->
        <property name="logMessages" value="true"/>
        <property name="logErrors" value="true"/>
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="includeScoping" value="false"/>
            </bean>
        </property>
    </bean>

    <bean id="userDetails" class="com.n4systems.fieldid.sso.SsoUserDetailsService"></bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="samlAuthenticationProvider" class="com.n4systems.fieldid.sso.ApplicationAuthenticationProvider">
        <!-- OPTIONAL property: can be used to store/load user data after login -->
        <property name="userDetails" ref="userDetails" />
    </bean>

    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="com.n4systems.fieldid.sso.ProtocolReplacingSamlContextProviderLB"/>

    <!-- Processing filter for WebSSO profile messages -->
    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
    </bean>

    <!-- Processing filter for WebSSO Holder-of-Key profile -->
    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
                <ref bean="postBinding"/>
                <ref bean="artifactBinding"/>
                <ref bean="soapBinding"/>
                <ref bean="paosBinding"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
    </bean>

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

    <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 ECP profile -->
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg>
            <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg>
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <property name="processor">
                    <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <constructor-arg ref="soapBinding"/>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!--SSO end-->

</beans>
